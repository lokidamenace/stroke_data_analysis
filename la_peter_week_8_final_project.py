# -*- coding: utf-8 -*-
"""La_Peter_Week_8_Final Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j_0EpCUYDcm9cH4vVFgdQDnD_cG7cWlf

### Week 8 Final Project

Author: Peter La

Title: An In-Depth Analysis of a Stroke Dataset

Date: March 11, 2025

Author: Peter la

Purpose: Conduct Exploratory Data Analysis (EDA) and advanced data visualization of the given stroke dataset.

Input: stroke_data.csv (clean)

Outputs:
heatmap.png
<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scatterplot.png
<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;boxplot.png
<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;histogram.png
<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;decision.png
<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;networkgraph.png
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import Libraries"""

# Commented out IPython magic to ensure Python compatibility.
import os
import warnings

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import seaborn as sns;

warnings.filterwarnings("ignore")
# %matplotlib inline
dpi = 300
sns.set()

from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC, LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.utils import shuffle
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split

"""Import Dataset"""

df = pd.read_csv(r'/content/drive/MyDrive/msds670/stroke_data.csv')
df.sample(10)

"""EDA"""

df.info()

df = df.drop('id', axis=1)

df.info()

categorical_columns = ['gender', 'ever_married', 'work_type', 'residence_type', 'smoking_status']

label_encoder = LabelEncoder()
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

df.describe()

df.to_csv('/content/drive/MyDrive/msds670/prepped_stroke_data.csv', index=False)

path = '/content/drive/MyDrive/msds670/'

"""Plot Visualizations"""

correlation_matrix = df.corr()
correlation_matrix

plt.style.use('default')

# Create mask for upper right of triangle
mask = np.triu(np.ones_like(correlation_matrix.corr(), dtype=bool))

# Create correlation heatmap for input variables
corr_min = -1
corr_max = 1

# Plotting

fig, ax = plt.subplots(figsize=(9.5, 8))

ax.grid(False)

sns.heatmap(correlation_matrix.corr(),
            vmin=corr_min,
            vmax=corr_max,
            cmap='BrBG',
            cbar_kws={"ticks": [-1, 0, 1]},
            mask=mask,
            ax=ax)

fig.suptitle('Correlation Between Stroke Data Variables', x=.46, fontsize=14)

plt.subplots_adjust(top=.92)
plt.show()

plot1_filename = 'heatmap.png'
fig.savefig(path + plot1_filename, dpi=dpi)

# Scatter plot using fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(10, 6))

# Scatterplot using seaborn
sns.scatterplot(data=df, x='age', y='avg_glucose_level', hue='stroke', palette='coolwarm', alpha=0.7, ax=ax)

# Title and labels
ax.set_title('Scatter Plot of Age vs. Average Glucose Level by Stroke Status')
ax.set_xlabel('Age')
ax.set_ylabel('Average Glucose Level')

# Customize legend
legend_labels = ['Stroke', 'No Stroke']
ax.legend(title='Stroke Status', labels=legend_labels)

# Display the plot
plt.show()

plot2_filename = 'scatterplot.png'
fig.savefig(path + plot2_filename, dpi=dpi)

# Plotting Age Distribution by Stroke Status using histograms
fig, ax = plt.subplots(figsize=(10, 6))

# Plot histograms for each stroke status
df[df['stroke'] == 0]['age'].plot(kind='hist', bins=30, alpha=0.5, ax=ax, label='No Stroke')
df[df['stroke'] == 1]['age'].plot(kind='hist', bins=30, alpha=0.5, ax=ax, label='Stroke')

# Title and labels
ax.set_title('Age Distribution by Stroke Status')
ax.set_xlabel('Age')
ax.set_ylabel('Count')

# Legend
ax.legend(title='Stroke Status')

# Display the plot
plt.show()

plot3_filename = 'histogram.png'
fig.savefig(path + plot3_filename, dpi=dpi)

# Boxplot for Average Glucose Levels by Stroke Status
fig, ax = plt.subplots(figsize=(8, 6))

# Boxplot using seaborn
sns.boxplot(data=df, x='stroke', y='avg_glucose_level', palette='coolwarm', ax=ax)

# Title and labels
ax.set_title('Boxplot of Average Glucose Levels by Stroke Status')
ax.set_xlabel('Stroke Status')
ax.set_ylabel('Average Glucose Level')
ax.set_xticklabels(['No Stroke', 'Stroke'])

# Display the plot
plt.show()

plot4_filename = 'boxplot.png'
fig.savefig(path + plot4_filename, dpi=dpi)

# Import libary
from sklearn.tree import DecisionTreeClassifier, plot_tree


# Split features and target
X = df.drop('stroke', axis=1)
y = df['stroke']

# Initialize and train a simple decision tree classifier
dt_classifier = DecisionTreeClassifier(max_depth=3, random_state=42)
dt_classifier.fit(X, y)

# Plotting the decision tree
fig, ax = plt.subplots(figsize=(20, 10))
plot_tree(dt_classifier, feature_names=X.columns, class_names=['No Stroke', 'Stroke'],
          filled=True, rounded=True, fontsize=12, ax=ax)

plt.title('Decision Tree Visualization for Stroke Prediction')
plt.show()

plot5_filename = 'decisiontree.png'
fig.savefig(path + plot5_filename, dpi=dpi)

# Import library
import networkx as nx

# Initialize a graph
G = nx.Graph()

# Load the original dataset
df2 = pd.read_csv(r'/content/drive/MyDrive/msds670/stroke_data.csv')

# Defining categorical features and target
categorical_features = ['gender', 'ever_married', 'work_type', 'residence_type', 'smoking_status']
target_feature = 'stroke'

# Adding edges between categories and the stroke status
for feature in categorical_features:
    for category in df2[feature].unique():
        # Connect each category to the feature name
        G.add_edge(feature, category)
        # Connect category to stroke status based on occurrence
        stroke_counts = df2[df2[feature] == category][target_feature].value_counts()
        for stroke_status in stroke_counts.index:
            stroke_label = 'Stroke' if stroke_status == 1 else 'No Stroke'
            G.add_edge(category, stroke_label, weight=stroke_counts[stroke_status])

# Plotting the network graph
fig, ax = plt.subplots(figsize=(14, 10))

# Positioning nodes with spring layout
pos = nx.spring_layout(G, k=0.8)

# Draw nodes and edges
nx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=3000, font_size=10, font_weight='bold', ax=ax)
nx.draw_networkx_edge_labels(G, pos, edge_labels=nx.get_edge_attributes(G, 'weight'))

# Set title
ax.set_title('Categorical Network Graph Linking Attributes to Stroke Status', fontsize=15)

# Display the plot
plt.show()

plot6_filename = 'networkgraph.png'
fig.savefig(path + plot6_filename, dpi=dpi)













